#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DATALAYER.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SHSdb4")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertBillinginfoe(Billinginfoe instance);
    partial void UpdateBillinginfoe(Billinginfoe instance);
    partial void DeleteBillinginfoe(Billinginfoe instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertTechnicianEmp(TechnicianEmp instance);
    partial void UpdateTechnicianEmp(TechnicianEmp instance);
    partial void DeleteTechnicianEmp(TechnicianEmp instance);
    partial void InsertSale_Emp(Sale_Emp instance);
    partial void UpdateSale_Emp(Sale_Emp instance);
    partial void DeleteSale_Emp(Sale_Emp instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertMaintenance(Maintenance instance);
    partial void UpdateMaintenance(Maintenance instance);
    partial void DeleteMaintenance(Maintenance instance);
    partial void InsertMessaging(Messaging instance);
    partial void UpdateMessaging(Messaging instance);
    partial void DeleteMessaging(Messaging instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertProductSystem(ProductSystem instance);
    partial void UpdateProductSystem(ProductSystem instance);
    partial void DeleteProductSystem(ProductSystem instance);
    partial void InsertSafetyProduct(SafetyProduct instance);
    partial void UpdateSafetyProduct(SafetyProduct instance);
    partial void DeleteSafetyProduct(SafetyProduct instance);
    partial void InsertConvienceProduct(ConvienceProduct instance);
    partial void UpdateConvienceProduct(ConvienceProduct instance);
    partial void DeleteConvienceProduct(ConvienceProduct instance);
    partial void InsertEnergyProduct(EnergyProduct instance);
    partial void UpdateEnergyProduct(EnergyProduct instance);
    partial void DeleteEnergyProduct(EnergyProduct instance);
    partial void InsertWarrenty(Warrenty instance);
    partial void UpdateWarrenty(Warrenty instance);
    partial void DeleteWarrenty(Warrenty instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::DATALAYER.Properties.Settings.Default.SHSdb4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<People> Peoples
		{
			get
			{
				return this.GetTable<People>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Billinginfoe> Billinginfoes
		{
			get
			{
				return this.GetTable<Billinginfoe>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<TechnicianEmp> TechnicianEmps
		{
			get
			{
				return this.GetTable<TechnicianEmp>();
			}
		}
		
		public System.Data.Linq.Table<Sale_Emp> Sale_Emps
		{
			get
			{
				return this.GetTable<Sale_Emp>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<Maintenance> Maintenances
		{
			get
			{
				return this.GetTable<Maintenance>();
			}
		}
		
		public System.Data.Linq.Table<Messaging> Messagings
		{
			get
			{
				return this.GetTable<Messaging>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Cart> Carts
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<ProductSystem> ProductSystems
		{
			get
			{
				return this.GetTable<ProductSystem>();
			}
		}
		
		public System.Data.Linq.Table<SafetyProduct> SafetyProducts
		{
			get
			{
				return this.GetTable<SafetyProduct>();
			}
		}
		
		public System.Data.Linq.Table<ConvienceProduct> ConvienceProducts
		{
			get
			{
				return this.GetTable<ConvienceProduct>();
			}
		}
		
		public System.Data.Linq.Table<EnergyProduct> EnergyProducts
		{
			get
			{
				return this.GetTable<EnergyProduct>();
			}
		}
		
		public System.Data.Linq.Table<Warrenty> Warrenties
		{
			get
			{
				return this.GetTable<Warrenty>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
	public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EmailAddress;
		
		private string _Password;
		
		private string _SSID;
		
		private string _DOB;
		
		private string _CellNumber;
		
		private System.Nullable<int> _Address_ID;
		
		private string _Department;
		
		private string _Gender;
		
		private EntitySet<Billinginfoe> _Billinginfoes;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<TechnicianEmp> _TechnicianEmps;
		
		private EntitySet<Sale_Emp> _Sale_Emps;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSSIDChanging(string value);
    partial void OnSSIDChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnCellNumberChanging(string value);
    partial void OnCellNumberChanged();
    partial void OnAddress_IDChanging(System.Nullable<int> value);
    partial void OnAddress_IDChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public People()
		{
			this._Billinginfoes = new EntitySet<Billinginfoe>(new Action<Billinginfoe>(this.attach_Billinginfoes), new Action<Billinginfoe>(this.detach_Billinginfoes));
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._TechnicianEmps = new EntitySet<TechnicianEmp>(new Action<TechnicianEmp>(this.attach_TechnicianEmps), new Action<TechnicianEmp>(this.detach_TechnicianEmps));
			this._Sale_Emps = new EntitySet<Sale_Emp>(new Action<Sale_Emp>(this.attach_Sale_Emps), new Action<Sale_Emp>(this.detach_Sale_Emps));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSID", DbType="NVarChar(MAX)")]
		public string SSID
		{
			get
			{
				return this._SSID;
			}
			set
			{
				if ((this._SSID != value))
				{
					this.OnSSIDChanging(value);
					this.SendPropertyChanging();
					this._SSID = value;
					this.SendPropertyChanged("SSID");
					this.OnSSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="NVarChar(MAX)")]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellNumber", DbType="NVarChar(MAX)")]
		public string CellNumber
		{
			get
			{
				return this._CellNumber;
			}
			set
			{
				if ((this._CellNumber != value))
				{
					this.OnCellNumberChanging(value);
					this.SendPropertyChanging();
					this._CellNumber = value;
					this.SendPropertyChanged("CellNumber");
					this.OnCellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_ID", DbType="Int")]
		public System.Nullable<int> Address_ID
		{
			get
			{
				return this._Address_ID;
			}
			set
			{
				if ((this._Address_ID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IDChanging(value);
					this.SendPropertyChanging();
					this._Address_ID = value;
					this.SendPropertyChanged("Address_ID");
					this.OnAddress_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(MAX)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(MAX)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Billinginfoe", Storage="_Billinginfoes", ThisKey="ID", OtherKey="Person_ID")]
		public EntitySet<Billinginfoe> Billinginfoes
		{
			get
			{
				return this._Billinginfoes;
			}
			set
			{
				this._Billinginfoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Admin", Storage="_Admins", ThisKey="ID", OtherKey="person_ID")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Client", Storage="_Clients", ThisKey="ID", OtherKey="Person_ID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_TechnicianEmp", Storage="_TechnicianEmps", ThisKey="ID", OtherKey="Person_ID")]
		public EntitySet<TechnicianEmp> TechnicianEmps
		{
			get
			{
				return this._TechnicianEmps;
			}
			set
			{
				this._TechnicianEmps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Sale_Emp", Storage="_Sale_Emps", ThisKey="ID", OtherKey="Person_ID")]
		public EntitySet<Sale_Emp> Sale_Emps
		{
			get
			{
				return this._Sale_Emps;
			}
			set
			{
				this._Sale_Emps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_People", Storage="_Address", ThisKey="Address_ID", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Peoples.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Peoples.Add(this);
						this._Address_ID = value.ID;
					}
					else
					{
						this._Address_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billinginfoes(Billinginfoe entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Billinginfoes(Billinginfoe entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_TechnicianEmps(TechnicianEmp entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_TechnicianEmps(TechnicianEmp entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Sale_Emps(Sale_Emp entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Sale_Emps(Sale_Emp entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Street;
		
		private int _StreetNum;
		
		private string _Zipcode;
		
		private string _City;
		
		private string _Province;
		
		private string _Country;
		
		private EntitySet<People> _Peoples;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetNumChanging(int value);
    partial void OnStreetNumChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Address()
		{
			this._Peoples = new EntitySet<People>(new Action<People>(this.attach_Peoples), new Action<People>(this.detach_Peoples));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(MAX)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNum", DbType="Int NOT NULL")]
		public int StreetNum
		{
			get
			{
				return this._StreetNum;
			}
			set
			{
				if ((this._StreetNum != value))
				{
					this.OnStreetNumChanging(value);
					this.SendPropertyChanging();
					this._StreetNum = value;
					this.SendPropertyChanged("StreetNum");
					this.OnStreetNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="NVarChar(MAX)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="NVarChar(MAX)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(MAX)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_People", Storage="_Peoples", ThisKey="ID", OtherKey="Address_ID")]
		public EntitySet<People> Peoples
		{
			get
			{
				return this._Peoples;
			}
			set
			{
				this._Peoples.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Peoples(People entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Peoples(People entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Billinginfoes")]
	public partial class Billinginfoe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CardName;
		
		private string _CardNum;
		
		private string _CardCVV;
		
		private string _CardExpireDate;
		
		private string _CardType;
		
		private System.Nullable<int> _Person_ID;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCardNameChanging(string value);
    partial void OnCardNameChanged();
    partial void OnCardNumChanging(string value);
    partial void OnCardNumChanged();
    partial void OnCardCVVChanging(string value);
    partial void OnCardCVVChanged();
    partial void OnCardExpireDateChanging(string value);
    partial void OnCardExpireDateChanged();
    partial void OnCardTypeChanging(string value);
    partial void OnCardTypeChanged();
    partial void OnPerson_IDChanging(System.Nullable<int> value);
    partial void OnPerson_IDChanged();
    #endregion
		
		public Billinginfoe()
		{
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardName", DbType="NVarChar(MAX)")]
		public string CardName
		{
			get
			{
				return this._CardName;
			}
			set
			{
				if ((this._CardName != value))
				{
					this.OnCardNameChanging(value);
					this.SendPropertyChanging();
					this._CardName = value;
					this.SendPropertyChanged("CardName");
					this.OnCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNum", DbType="NVarChar(MAX)")]
		public string CardNum
		{
			get
			{
				return this._CardNum;
			}
			set
			{
				if ((this._CardNum != value))
				{
					this.OnCardNumChanging(value);
					this.SendPropertyChanging();
					this._CardNum = value;
					this.SendPropertyChanged("CardNum");
					this.OnCardNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardCVV", DbType="NVarChar(MAX)")]
		public string CardCVV
		{
			get
			{
				return this._CardCVV;
			}
			set
			{
				if ((this._CardCVV != value))
				{
					this.OnCardCVVChanging(value);
					this.SendPropertyChanging();
					this._CardCVV = value;
					this.SendPropertyChanged("CardCVV");
					this.OnCardCVVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardExpireDate", DbType="NVarChar(MAX)")]
		public string CardExpireDate
		{
			get
			{
				return this._CardExpireDate;
			}
			set
			{
				if ((this._CardExpireDate != value))
				{
					this.OnCardExpireDateChanging(value);
					this.SendPropertyChanging();
					this._CardExpireDate = value;
					this.SendPropertyChanged("CardExpireDate");
					this.OnCardExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardType", DbType="NVarChar(MAX)")]
		public string CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_ID", DbType="Int")]
		public System.Nullable<int> Person_ID
		{
			get
			{
				return this._Person_ID;
			}
			set
			{
				if ((this._Person_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IDChanging(value);
					this.SendPropertyChanging();
					this._Person_ID = value;
					this.SendPropertyChanged("Person_ID");
					this.OnPerson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Billinginfoe", Storage="_People", ThisKey="Person_ID", OtherKey="ID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Billinginfoes.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Billinginfoes.Add(this);
						this._Person_ID = value.ID;
					}
					else
					{
						this._Person_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Messaging_ID;
		
		private System.Nullable<int> _person_ID;
		
		private EntityRef<People> _People;
		
		private EntityRef<Messaging> _Messaging;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessaging_IDChanging(System.Nullable<int> value);
    partial void OnMessaging_IDChanged();
    partial void Onperson_IDChanging(System.Nullable<int> value);
    partial void Onperson_IDChanged();
    #endregion
		
		public Admin()
		{
			this._People = default(EntityRef<People>);
			this._Messaging = default(EntityRef<Messaging>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Messaging_ID", DbType="Int")]
		public System.Nullable<int> Messaging_ID
		{
			get
			{
				return this._Messaging_ID;
			}
			set
			{
				if ((this._Messaging_ID != value))
				{
					if (this._Messaging.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessaging_IDChanging(value);
					this.SendPropertyChanging();
					this._Messaging_ID = value;
					this.SendPropertyChanged("Messaging_ID");
					this.OnMessaging_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person_ID", DbType="Int")]
		public System.Nullable<int> person_ID
		{
			get
			{
				return this._person_ID;
			}
			set
			{
				if ((this._person_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson_IDChanging(value);
					this.SendPropertyChanging();
					this._person_ID = value;
					this.SendPropertyChanged("person_ID");
					this.Onperson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Admin", Storage="_People", ThisKey="person_ID", OtherKey="ID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._person_ID = value.ID;
					}
					else
					{
						this._person_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Admin", Storage="_Messaging", ThisKey="Messaging_ID", OtherKey="ID", IsForeignKey=true)]
		public Messaging Messaging
		{
			get
			{
				return this._Messaging.Entity;
			}
			set
			{
				Messaging previousValue = this._Messaging.Entity;
				if (((previousValue != value) 
							|| (this._Messaging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Messaging.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._Messaging.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._Messaging_ID = value.ID;
					}
					else
					{
						this._Messaging_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Messaging");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Person_ID;
		
		private System.Nullable<int> _Messaging_ID;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<People> _People;
		
		private EntityRef<Messaging> _Messaging;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPerson_IDChanging(System.Nullable<int> value);
    partial void OnPerson_IDChanged();
    partial void OnMessaging_IDChanging(System.Nullable<int> value);
    partial void OnMessaging_IDChanged();
    #endregion
		
		public Client()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._People = default(EntityRef<People>);
			this._Messaging = default(EntityRef<Messaging>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_ID", DbType="Int")]
		public System.Nullable<int> Person_ID
		{
			get
			{
				return this._Person_ID;
			}
			set
			{
				if ((this._Person_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IDChanging(value);
					this.SendPropertyChanging();
					this._Person_ID = value;
					this.SendPropertyChanged("Person_ID");
					this.OnPerson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Messaging_ID", DbType="Int")]
		public System.Nullable<int> Messaging_ID
		{
			get
			{
				return this._Messaging_ID;
			}
			set
			{
				if ((this._Messaging_ID != value))
				{
					if (this._Messaging.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessaging_IDChanging(value);
					this.SendPropertyChanging();
					this._Messaging_ID = value;
					this.SendPropertyChanged("Messaging_ID");
					this.OnMessaging_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="Client_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Client", Storage="_People", ThisKey="Person_ID", OtherKey="ID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._Person_ID = value.ID;
					}
					else
					{
						this._Person_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Client", Storage="_Messaging", ThisKey="Messaging_ID", OtherKey="ID", IsForeignKey=true)]
		public Messaging Messaging
		{
			get
			{
				return this._Messaging.Entity;
			}
			set
			{
				Messaging previousValue = this._Messaging.Entity;
				if (((previousValue != value) 
							|| (this._Messaging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Messaging.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Messaging.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._Messaging_ID = value.ID;
					}
					else
					{
						this._Messaging_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Messaging");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnicianEmps")]
	public partial class TechnicianEmp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Person_ID;
		
		private System.Nullable<int> _Messaging_ID;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<People> _People;
		
		private EntityRef<Messaging> _Messaging;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPerson_IDChanging(System.Nullable<int> value);
    partial void OnPerson_IDChanged();
    partial void OnMessaging_IDChanging(System.Nullable<int> value);
    partial void OnMessaging_IDChanged();
    #endregion
		
		public TechnicianEmp()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._People = default(EntityRef<People>);
			this._Messaging = default(EntityRef<Messaging>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_ID", DbType="Int")]
		public System.Nullable<int> Person_ID
		{
			get
			{
				return this._Person_ID;
			}
			set
			{
				if ((this._Person_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IDChanging(value);
					this.SendPropertyChanging();
					this._Person_ID = value;
					this.SendPropertyChanged("Person_ID");
					this.OnPerson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Messaging_ID", DbType="Int")]
		public System.Nullable<int> Messaging_ID
		{
			get
			{
				return this._Messaging_ID;
			}
			set
			{
				if ((this._Messaging_ID != value))
				{
					if (this._Messaging.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessaging_IDChanging(value);
					this.SendPropertyChanging();
					this._Messaging_ID = value;
					this.SendPropertyChanged("Messaging_ID");
					this.OnMessaging_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicianEmp_Schedule", Storage="_Schedules", ThisKey="ID", OtherKey="TechnicianEmp_ID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicianEmp_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="TechnicianEmp_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_TechnicianEmp", Storage="_People", ThisKey="Person_ID", OtherKey="ID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.TechnicianEmps.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.TechnicianEmps.Add(this);
						this._Person_ID = value.ID;
					}
					else
					{
						this._Person_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_TechnicianEmp", Storage="_Messaging", ThisKey="Messaging_ID", OtherKey="ID", IsForeignKey=true)]
		public Messaging Messaging
		{
			get
			{
				return this._Messaging.Entity;
			}
			set
			{
				Messaging previousValue = this._Messaging.Entity;
				if (((previousValue != value) 
							|| (this._Messaging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Messaging.Entity = null;
						previousValue.TechnicianEmps.Remove(this);
					}
					this._Messaging.Entity = value;
					if ((value != null))
					{
						value.TechnicianEmps.Add(this);
						this._Messaging_ID = value.ID;
					}
					else
					{
						this._Messaging_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Messaging");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TechnicianEmp = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TechnicianEmp = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.TechnicianEmp = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.TechnicianEmp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale_Emp")]
	public partial class Sale_Emp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Person_ID;
		
		private System.Nullable<int> _Messaging_ID;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<People> _People;
		
		private EntityRef<Messaging> _Messaging;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPerson_IDChanging(System.Nullable<int> value);
    partial void OnPerson_IDChanged();
    partial void OnMessaging_IDChanging(System.Nullable<int> value);
    partial void OnMessaging_IDChanged();
    #endregion
		
		public Sale_Emp()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._People = default(EntityRef<People>);
			this._Messaging = default(EntityRef<Messaging>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_ID", DbType="Int")]
		public System.Nullable<int> Person_ID
		{
			get
			{
				return this._Person_ID;
			}
			set
			{
				if ((this._Person_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IDChanging(value);
					this.SendPropertyChanging();
					this._Person_ID = value;
					this.SendPropertyChanged("Person_ID");
					this.OnPerson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Messaging_ID", DbType="Int")]
		public System.Nullable<int> Messaging_ID
		{
			get
			{
				return this._Messaging_ID;
			}
			set
			{
				if ((this._Messaging_ID != value))
				{
					if (this._Messaging.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessaging_IDChanging(value);
					this.SendPropertyChanging();
					this._Messaging_ID = value;
					this.SendPropertyChanged("Messaging_ID");
					this.OnMessaging_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Emp_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="SaleEmp_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Sale_Emp", Storage="_People", ThisKey="Person_ID", OtherKey="ID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Sale_Emps.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Sale_Emps.Add(this);
						this._Person_ID = value.ID;
					}
					else
					{
						this._Person_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Sale_Emp", Storage="_Messaging", ThisKey="Messaging_ID", OtherKey="ID", IsForeignKey=true)]
		public Messaging Messaging
		{
			get
			{
				return this._Messaging.Entity;
			}
			set
			{
				Messaging previousValue = this._Messaging.Entity;
				if (((previousValue != value) 
							|| (this._Messaging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Messaging.Entity = null;
						previousValue.Sale_Emps.Remove(this);
					}
					this._Messaging.Entity = value;
					if ((value != null))
					{
						value.Sale_Emps.Add(this);
						this._Messaging_ID = value.ID;
					}
					else
					{
						this._Messaging_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Messaging");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Sale_Emp = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Sale_Emp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedules")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _InsDateStart;
		
		private System.DateTime _MainDateStart;
		
		private System.Nullable<int> _TechnicianEmp_ID;
		
		private EntityRef<TechnicianEmp> _TechnicianEmp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsDateStartChanging(System.DateTime value);
    partial void OnInsDateStartChanged();
    partial void OnMainDateStartChanging(System.DateTime value);
    partial void OnMainDateStartChanged();
    partial void OnTechnicianEmp_IDChanging(System.Nullable<int> value);
    partial void OnTechnicianEmp_IDChanged();
    #endregion
		
		public Schedule()
		{
			this._TechnicianEmp = default(EntityRef<TechnicianEmp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsDateStart", DbType="DateTime NOT NULL")]
		public System.DateTime InsDateStart
		{
			get
			{
				return this._InsDateStart;
			}
			set
			{
				if ((this._InsDateStart != value))
				{
					this.OnInsDateStartChanging(value);
					this.SendPropertyChanging();
					this._InsDateStart = value;
					this.SendPropertyChanged("InsDateStart");
					this.OnInsDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainDateStart", DbType="DateTime NOT NULL")]
		public System.DateTime MainDateStart
		{
			get
			{
				return this._MainDateStart;
			}
			set
			{
				if ((this._MainDateStart != value))
				{
					this.OnMainDateStartChanging(value);
					this.SendPropertyChanging();
					this._MainDateStart = value;
					this.SendPropertyChanged("MainDateStart");
					this.OnMainDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicianEmp_ID", DbType="Int")]
		public System.Nullable<int> TechnicianEmp_ID
		{
			get
			{
				return this._TechnicianEmp_ID;
			}
			set
			{
				if ((this._TechnicianEmp_ID != value))
				{
					if (this._TechnicianEmp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnicianEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._TechnicianEmp_ID = value;
					this.SendPropertyChanged("TechnicianEmp_ID");
					this.OnTechnicianEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicianEmp_Schedule", Storage="_TechnicianEmp", ThisKey="TechnicianEmp_ID", OtherKey="ID", IsForeignKey=true)]
		public TechnicianEmp TechnicianEmp
		{
			get
			{
				return this._TechnicianEmp.Entity;
			}
			set
			{
				TechnicianEmp previousValue = this._TechnicianEmp.Entity;
				if (((previousValue != value) 
							|| (this._TechnicianEmp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicianEmp.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._TechnicianEmp.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._TechnicianEmp_ID = value.ID;
					}
					else
					{
						this._TechnicianEmp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TechnicianEmp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contracts")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ContractName;
		
		private string _Discription;
		
		private System.DateTime _DateExpire;
		
		private string _Date;
		
		private EntitySet<Maintenance> _Maintenances;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContractNameChanging(string value);
    partial void OnContractNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnDateExpireChanging(System.DateTime value);
    partial void OnDateExpireChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    #endregion
		
		public Contract()
		{
			this._Maintenances = new EntitySet<Maintenance>(new Action<Maintenance>(this.attach_Maintenances), new Action<Maintenance>(this.detach_Maintenances));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractName", DbType="NVarChar(MAX)")]
		public string ContractName
		{
			get
			{
				return this._ContractName;
			}
			set
			{
				if ((this._ContractName != value))
				{
					this.OnContractNameChanging(value);
					this.SendPropertyChanging();
					this._ContractName = value;
					this.SendPropertyChanged("ContractName");
					this.OnContractNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateExpire", DbType="DateTime NOT NULL")]
		public System.DateTime DateExpire
		{
			get
			{
				return this._DateExpire;
			}
			set
			{
				if ((this._DateExpire != value))
				{
					this.OnDateExpireChanging(value);
					this.SendPropertyChanging();
					this._DateExpire = value;
					this.SendPropertyChanged("DateExpire");
					this.OnDateExpireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(MAX)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Maintenance", Storage="_Maintenances", ThisKey="ID", OtherKey="Contract_ID")]
		public EntitySet<Maintenance> Maintenances
		{
			get
			{
				return this._Maintenances;
			}
			set
			{
				this._Maintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="Contract_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maintenances")]
	public partial class Maintenance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DateStart;
		
		private string _DateEnd;
		
		private System.Nullable<int> _Contract_ID;
		
		private string _Name;
		
		private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateStartChanging(string value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(string value);
    partial void OnDateEndChanged();
    partial void OnContract_IDChanging(System.Nullable<int> value);
    partial void OnContract_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Maintenance()
		{
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="NVarChar(MAX)")]
		public string DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="NVarChar(MAX)")]
		public string DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_ID", DbType="Int")]
		public System.Nullable<int> Contract_ID
		{
			get
			{
				return this._Contract_ID;
			}
			set
			{
				if ((this._Contract_ID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContract_IDChanging(value);
					this.SendPropertyChanging();
					this._Contract_ID = value;
					this.SendPropertyChanged("Contract_ID");
					this.OnContract_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Maintenance", Storage="_Contract", ThisKey="Contract_ID", OtherKey="ID", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.Maintenances.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.Maintenances.Add(this);
						this._Contract_ID = value.ID;
					}
					else
					{
						this._Contract_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messagings")]
	public partial class Messaging : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _subject;
		
		private string _Sender;
		
		private string _Receiver;
		
		private string _Msg;
		
		private System.DateTime _Log;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<TechnicianEmp> _TechnicianEmps;
		
		private EntitySet<Sale_Emp> _Sale_Emps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnMsgChanging(string value);
    partial void OnMsgChanged();
    partial void OnLogChanging(System.DateTime value);
    partial void OnLogChanged();
    #endregion
		
		public Messaging()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._TechnicianEmps = new EntitySet<TechnicianEmp>(new Action<TechnicianEmp>(this.attach_TechnicianEmps), new Action<TechnicianEmp>(this.detach_TechnicianEmps));
			this._Sale_Emps = new EntitySet<Sale_Emp>(new Action<Sale_Emp>(this.attach_Sale_Emps), new Action<Sale_Emp>(this.detach_Sale_Emps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NVarChar(MAX)")]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="NVarChar(MAX)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receiver", DbType="NVarChar(MAX)")]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg", DbType="NVarChar(MAX)")]
		public string Msg
		{
			get
			{
				return this._Msg;
			}
			set
			{
				if ((this._Msg != value))
				{
					this.OnMsgChanging(value);
					this.SendPropertyChanging();
					this._Msg = value;
					this.SendPropertyChanged("Msg");
					this.OnMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Log]", Storage="_Log", DbType="DateTime NOT NULL")]
		public System.DateTime Log
		{
			get
			{
				return this._Log;
			}
			set
			{
				if ((this._Log != value))
				{
					this.OnLogChanging(value);
					this.SendPropertyChanging();
					this._Log = value;
					this.SendPropertyChanged("Log");
					this.OnLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Admin", Storage="_Admins", ThisKey="ID", OtherKey="Messaging_ID")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Client", Storage="_Clients", ThisKey="ID", OtherKey="Messaging_ID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_TechnicianEmp", Storage="_TechnicianEmps", ThisKey="ID", OtherKey="Messaging_ID")]
		public EntitySet<TechnicianEmp> TechnicianEmps
		{
			get
			{
				return this._TechnicianEmps;
			}
			set
			{
				this._TechnicianEmps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Messaging_Sale_Emp", Storage="_Sale_Emps", ThisKey="ID", OtherKey="Messaging_ID")]
		public EntitySet<Sale_Emp> Sale_Emps
		{
			get
			{
				return this._Sale_Emps;
			}
			set
			{
				this._Sale_Emps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = null;
		}
		
		private void attach_TechnicianEmps(TechnicianEmp entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = this;
		}
		
		private void detach_TechnicianEmps(TechnicianEmp entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = null;
		}
		
		private void attach_Sale_Emps(Sale_Emp entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = this;
		}
		
		private void detach_Sale_Emps(Sale_Emp entity)
		{
			this.SendPropertyChanging();
			entity.Messaging = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Cart_ID;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Contract_ID;
		
		private System.Nullable<int> _SaleEmp_ID;
		
		private System.Nullable<int> _TechnicianEmp_ID;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Sale_Emp> _Sale_Emp;
		
		private EntityRef<TechnicianEmp> _TechnicianEmp;
		
		private EntityRef<Cart> _Cart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCart_IDChanging(System.Nullable<int> value);
    partial void OnCart_IDChanged();
    partial void OnClient_IDChanging(System.Nullable<int> value);
    partial void OnClient_IDChanged();
    partial void OnContract_IDChanging(System.Nullable<int> value);
    partial void OnContract_IDChanged();
    partial void OnSaleEmp_IDChanging(System.Nullable<int> value);
    partial void OnSaleEmp_IDChanged();
    partial void OnTechnicianEmp_IDChanging(System.Nullable<int> value);
    partial void OnTechnicianEmp_IDChanged();
    #endregion
		
		public Transaction()
		{
			this._Client = default(EntityRef<Client>);
			this._Contract = default(EntityRef<Contract>);
			this._Sale_Emp = default(EntityRef<Sale_Emp>);
			this._TechnicianEmp = default(EntityRef<TechnicianEmp>);
			this._Cart = default(EntityRef<Cart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", DbType="Int")]
		public System.Nullable<int> Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClient_IDChanging(value);
					this.SendPropertyChanging();
					this._Client_ID = value;
					this.SendPropertyChanged("Client_ID");
					this.OnClient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_ID", DbType="Int")]
		public System.Nullable<int> Contract_ID
		{
			get
			{
				return this._Contract_ID;
			}
			set
			{
				if ((this._Contract_ID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContract_IDChanging(value);
					this.SendPropertyChanging();
					this._Contract_ID = value;
					this.SendPropertyChanged("Contract_ID");
					this.OnContract_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleEmp_ID", DbType="Int")]
		public System.Nullable<int> SaleEmp_ID
		{
			get
			{
				return this._SaleEmp_ID;
			}
			set
			{
				if ((this._SaleEmp_ID != value))
				{
					if (this._Sale_Emp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._SaleEmp_ID = value;
					this.SendPropertyChanged("SaleEmp_ID");
					this.OnSaleEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicianEmp_ID", DbType="Int")]
		public System.Nullable<int> TechnicianEmp_ID
		{
			get
			{
				return this._TechnicianEmp_ID;
			}
			set
			{
				if ((this._TechnicianEmp_ID != value))
				{
					if (this._TechnicianEmp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnicianEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._TechnicianEmp_ID = value;
					this.SendPropertyChanged("TechnicianEmp_ID");
					this.OnTechnicianEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Transaction", Storage="_Client", ThisKey="Client_ID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Client_ID = value.ID;
					}
					else
					{
						this._Client_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Transaction", Storage="_Contract", ThisKey="Contract_ID", OtherKey="ID", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Contract_ID = value.ID;
					}
					else
					{
						this._Contract_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Emp_Transaction", Storage="_Sale_Emp", ThisKey="SaleEmp_ID", OtherKey="ID", IsForeignKey=true)]
		public Sale_Emp Sale_Emp
		{
			get
			{
				return this._Sale_Emp.Entity;
			}
			set
			{
				Sale_Emp previousValue = this._Sale_Emp.Entity;
				if (((previousValue != value) 
							|| (this._Sale_Emp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale_Emp.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Sale_Emp.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._SaleEmp_ID = value.ID;
					}
					else
					{
						this._SaleEmp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sale_Emp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnicianEmp_Transaction", Storage="_TechnicianEmp", ThisKey="TechnicianEmp_ID", OtherKey="ID", IsForeignKey=true)]
		public TechnicianEmp TechnicianEmp
		{
			get
			{
				return this._TechnicianEmp.Entity;
			}
			set
			{
				TechnicianEmp previousValue = this._TechnicianEmp.Entity;
				if (((previousValue != value) 
							|| (this._TechnicianEmp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnicianEmp.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._TechnicianEmp.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._TechnicianEmp_ID = value.ID;
					}
					else
					{
						this._TechnicianEmp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TechnicianEmp");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Transaction", Storage="_Cart", ThisKey="Cart_ID", OtherKey="ID", IsForeignKey=true)]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Cart_ID = value.ID;
					}
					else
					{
						this._Cart_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Carts")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private double _TotalPrice;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<ProductSystem> _ProductSystems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTotalPriceChanging(double value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public Cart()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._ProductSystems = new EntitySet<ProductSystem>(new Action<ProductSystem>(this.attach_ProductSystems), new Action<ProductSystem>(this.detach_ProductSystems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Float NOT NULL")]
		public double TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="Cart_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_ProductSystem", Storage="_ProductSystems", ThisKey="ID", OtherKey="Cart_ID")]
		public EntitySet<ProductSystem> ProductSystems
		{
			get
			{
				return this._ProductSystems;
			}
			set
			{
				this._ProductSystems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
		
		private void attach_ProductSystems(ProductSystem entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_ProductSystems(ProductSystem entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductSystems")]
	public partial class ProductSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _Price;
		
		private int _Cart_ID;
		
		private EntitySet<SafetyProduct> _SafetyProducts;
		
		private EntitySet<ConvienceProduct> _ConvienceProducts;
		
		private EntitySet<EnergyProduct> _EnergyProducts;
		
		private EntityRef<Cart> _Cart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnCart_IDChanging(int value);
    partial void OnCart_IDChanged();
    #endregion
		
		public ProductSystem()
		{
			this._SafetyProducts = new EntitySet<SafetyProduct>(new Action<SafetyProduct>(this.attach_SafetyProducts), new Action<SafetyProduct>(this.detach_SafetyProducts));
			this._ConvienceProducts = new EntitySet<ConvienceProduct>(new Action<ConvienceProduct>(this.attach_ConvienceProducts), new Action<ConvienceProduct>(this.detach_ConvienceProducts));
			this._EnergyProducts = new EntitySet<EnergyProduct>(new Action<EnergyProduct>(this.attach_EnergyProducts), new Action<EnergyProduct>(this.detach_EnergyProducts));
			this._Cart = default(EntityRef<Cart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", DbType="Int NOT NULL")]
		public int Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_SafetyProduct", Storage="_SafetyProducts", ThisKey="ID", OtherKey="ProductSystems_ID")]
		public EntitySet<SafetyProduct> SafetyProducts
		{
			get
			{
				return this._SafetyProducts;
			}
			set
			{
				this._SafetyProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_ConvienceProduct", Storage="_ConvienceProducts", ThisKey="ID", OtherKey="ProductSystems_ID")]
		public EntitySet<ConvienceProduct> ConvienceProducts
		{
			get
			{
				return this._ConvienceProducts;
			}
			set
			{
				this._ConvienceProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_EnergyProduct", Storage="_EnergyProducts", ThisKey="ID", OtherKey="ProductSystems_ID")]
		public EntitySet<EnergyProduct> EnergyProducts
		{
			get
			{
				return this._EnergyProducts;
			}
			set
			{
				this._EnergyProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_ProductSystem", Storage="_Cart", ThisKey="Cart_ID", OtherKey="ID", IsForeignKey=true)]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.ProductSystems.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.ProductSystems.Add(this);
						this._Cart_ID = value.ID;
					}
					else
					{
						this._Cart_ID = default(int);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SafetyProducts(SafetyProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = this;
		}
		
		private void detach_SafetyProducts(SafetyProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = null;
		}
		
		private void attach_ConvienceProducts(ConvienceProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = this;
		}
		
		private void detach_ConvienceProducts(ConvienceProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = null;
		}
		
		private void attach_EnergyProducts(EnergyProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = this;
		}
		
		private void detach_EnergyProducts(EnergyProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SafetyProducts")]
	public partial class SafetyProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Discription;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Warrenty_ID;
		
		private System.Nullable<int> _ProductSystems_ID;
		
		private EntityRef<ProductSystem> _ProductSystem;
		
		private EntityRef<Warrenty> _Warrenty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnWarrenty_IDChanging(System.Nullable<int> value);
    partial void OnWarrenty_IDChanged();
    partial void OnProductSystems_IDChanging(System.Nullable<int> value);
    partial void OnProductSystems_IDChanged();
    #endregion
		
		public SafetyProduct()
		{
			this._ProductSystem = default(EntityRef<ProductSystem>);
			this._Warrenty = default(EntityRef<Warrenty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warrenty_ID", DbType="Int")]
		public System.Nullable<int> Warrenty_ID
		{
			get
			{
				return this._Warrenty_ID;
			}
			set
			{
				if ((this._Warrenty_ID != value))
				{
					if (this._Warrenty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarrenty_IDChanging(value);
					this.SendPropertyChanging();
					this._Warrenty_ID = value;
					this.SendPropertyChanged("Warrenty_ID");
					this.OnWarrenty_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSystems_ID", DbType="Int")]
		public System.Nullable<int> ProductSystems_ID
		{
			get
			{
				return this._ProductSystems_ID;
			}
			set
			{
				if ((this._ProductSystems_ID != value))
				{
					if (this._ProductSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductSystems_IDChanging(value);
					this.SendPropertyChanging();
					this._ProductSystems_ID = value;
					this.SendPropertyChanged("ProductSystems_ID");
					this.OnProductSystems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_SafetyProduct", Storage="_ProductSystem", ThisKey="ProductSystems_ID", OtherKey="ID", IsForeignKey=true)]
		public ProductSystem ProductSystem
		{
			get
			{
				return this._ProductSystem.Entity;
			}
			set
			{
				ProductSystem previousValue = this._ProductSystem.Entity;
				if (((previousValue != value) 
							|| (this._ProductSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductSystem.Entity = null;
						previousValue.SafetyProducts.Remove(this);
					}
					this._ProductSystem.Entity = value;
					if ((value != null))
					{
						value.SafetyProducts.Add(this);
						this._ProductSystems_ID = value.ID;
					}
					else
					{
						this._ProductSystems_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_SafetyProduct", Storage="_Warrenty", ThisKey="Warrenty_ID", OtherKey="ID", IsForeignKey=true)]
		public Warrenty Warrenty
		{
			get
			{
				return this._Warrenty.Entity;
			}
			set
			{
				Warrenty previousValue = this._Warrenty.Entity;
				if (((previousValue != value) 
							|| (this._Warrenty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warrenty.Entity = null;
						previousValue.SafetyProducts.Remove(this);
					}
					this._Warrenty.Entity = value;
					if ((value != null))
					{
						value.SafetyProducts.Add(this);
						this._Warrenty_ID = value.ID;
					}
					else
					{
						this._Warrenty_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warrenty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConvienceProducts")]
	public partial class ConvienceProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Discription;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Warrenty_ID;
		
		private System.Nullable<int> _ProductSystems_ID;
		
		private EntityRef<ProductSystem> _ProductSystem;
		
		private EntityRef<Warrenty> _Warrenty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnWarrenty_IDChanging(System.Nullable<int> value);
    partial void OnWarrenty_IDChanged();
    partial void OnProductSystems_IDChanging(System.Nullable<int> value);
    partial void OnProductSystems_IDChanged();
    #endregion
		
		public ConvienceProduct()
		{
			this._ProductSystem = default(EntityRef<ProductSystem>);
			this._Warrenty = default(EntityRef<Warrenty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warrenty_ID", DbType="Int")]
		public System.Nullable<int> Warrenty_ID
		{
			get
			{
				return this._Warrenty_ID;
			}
			set
			{
				if ((this._Warrenty_ID != value))
				{
					if (this._Warrenty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarrenty_IDChanging(value);
					this.SendPropertyChanging();
					this._Warrenty_ID = value;
					this.SendPropertyChanged("Warrenty_ID");
					this.OnWarrenty_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSystems_ID", DbType="Int")]
		public System.Nullable<int> ProductSystems_ID
		{
			get
			{
				return this._ProductSystems_ID;
			}
			set
			{
				if ((this._ProductSystems_ID != value))
				{
					if (this._ProductSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductSystems_IDChanging(value);
					this.SendPropertyChanging();
					this._ProductSystems_ID = value;
					this.SendPropertyChanged("ProductSystems_ID");
					this.OnProductSystems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_ConvienceProduct", Storage="_ProductSystem", ThisKey="ProductSystems_ID", OtherKey="ID", IsForeignKey=true)]
		public ProductSystem ProductSystem
		{
			get
			{
				return this._ProductSystem.Entity;
			}
			set
			{
				ProductSystem previousValue = this._ProductSystem.Entity;
				if (((previousValue != value) 
							|| (this._ProductSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductSystem.Entity = null;
						previousValue.ConvienceProducts.Remove(this);
					}
					this._ProductSystem.Entity = value;
					if ((value != null))
					{
						value.ConvienceProducts.Add(this);
						this._ProductSystems_ID = value.ID;
					}
					else
					{
						this._ProductSystems_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_ConvienceProduct", Storage="_Warrenty", ThisKey="Warrenty_ID", OtherKey="ID", IsForeignKey=true)]
		public Warrenty Warrenty
		{
			get
			{
				return this._Warrenty.Entity;
			}
			set
			{
				Warrenty previousValue = this._Warrenty.Entity;
				if (((previousValue != value) 
							|| (this._Warrenty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warrenty.Entity = null;
						previousValue.ConvienceProducts.Remove(this);
					}
					this._Warrenty.Entity = value;
					if ((value != null))
					{
						value.ConvienceProducts.Add(this);
						this._Warrenty_ID = value.ID;
					}
					else
					{
						this._Warrenty_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warrenty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnergyProducts")]
	public partial class EnergyProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Discription;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Warrenty_ID;
		
		private System.Nullable<int> _ProductSystems_ID;
		
		private EntityRef<ProductSystem> _ProductSystem;
		
		private EntityRef<Warrenty> _Warrenty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnWarrenty_IDChanging(System.Nullable<int> value);
    partial void OnWarrenty_IDChanged();
    partial void OnProductSystems_IDChanging(System.Nullable<int> value);
    partial void OnProductSystems_IDChanged();
    #endregion
		
		public EnergyProduct()
		{
			this._ProductSystem = default(EntityRef<ProductSystem>);
			this._Warrenty = default(EntityRef<Warrenty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warrenty_ID", DbType="Int")]
		public System.Nullable<int> Warrenty_ID
		{
			get
			{
				return this._Warrenty_ID;
			}
			set
			{
				if ((this._Warrenty_ID != value))
				{
					if (this._Warrenty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarrenty_IDChanging(value);
					this.SendPropertyChanging();
					this._Warrenty_ID = value;
					this.SendPropertyChanged("Warrenty_ID");
					this.OnWarrenty_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSystems_ID", DbType="Int")]
		public System.Nullable<int> ProductSystems_ID
		{
			get
			{
				return this._ProductSystems_ID;
			}
			set
			{
				if ((this._ProductSystems_ID != value))
				{
					if (this._ProductSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductSystems_IDChanging(value);
					this.SendPropertyChanging();
					this._ProductSystems_ID = value;
					this.SendPropertyChanged("ProductSystems_ID");
					this.OnProductSystems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductSystem_EnergyProduct", Storage="_ProductSystem", ThisKey="ProductSystems_ID", OtherKey="ID", IsForeignKey=true)]
		public ProductSystem ProductSystem
		{
			get
			{
				return this._ProductSystem.Entity;
			}
			set
			{
				ProductSystem previousValue = this._ProductSystem.Entity;
				if (((previousValue != value) 
							|| (this._ProductSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductSystem.Entity = null;
						previousValue.EnergyProducts.Remove(this);
					}
					this._ProductSystem.Entity = value;
					if ((value != null))
					{
						value.EnergyProducts.Add(this);
						this._ProductSystems_ID = value.ID;
					}
					else
					{
						this._ProductSystems_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_EnergyProduct", Storage="_Warrenty", ThisKey="Warrenty_ID", OtherKey="ID", IsForeignKey=true)]
		public Warrenty Warrenty
		{
			get
			{
				return this._Warrenty.Entity;
			}
			set
			{
				Warrenty previousValue = this._Warrenty.Entity;
				if (((previousValue != value) 
							|| (this._Warrenty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warrenty.Entity = null;
						previousValue.EnergyProducts.Remove(this);
					}
					this._Warrenty.Entity = value;
					if ((value != null))
					{
						value.EnergyProducts.Add(this);
						this._Warrenty_ID = value.ID;
					}
					else
					{
						this._Warrenty_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warrenty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warrenties")]
	public partial class Warrenty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private string _Duration;
		
		private string _Discription;
		
		private EntitySet<SafetyProduct> _SafetyProducts;
		
		private EntitySet<ConvienceProduct> _ConvienceProducts;
		
		private EntitySet<EnergyProduct> _EnergyProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    #endregion
		
		public Warrenty()
		{
			this._SafetyProducts = new EntitySet<SafetyProduct>(new Action<SafetyProduct>(this.attach_SafetyProducts), new Action<SafetyProduct>(this.detach_SafetyProducts));
			this._ConvienceProducts = new EntitySet<ConvienceProduct>(new Action<ConvienceProduct>(this.attach_ConvienceProducts), new Action<ConvienceProduct>(this.detach_ConvienceProducts));
			this._EnergyProducts = new EntitySet<EnergyProduct>(new Action<EnergyProduct>(this.attach_EnergyProducts), new Action<EnergyProduct>(this.detach_EnergyProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="NVarChar(MAX)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_SafetyProduct", Storage="_SafetyProducts", ThisKey="ID", OtherKey="Warrenty_ID")]
		public EntitySet<SafetyProduct> SafetyProducts
		{
			get
			{
				return this._SafetyProducts;
			}
			set
			{
				this._SafetyProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_ConvienceProduct", Storage="_ConvienceProducts", ThisKey="ID", OtherKey="Warrenty_ID")]
		public EntitySet<ConvienceProduct> ConvienceProducts
		{
			get
			{
				return this._ConvienceProducts;
			}
			set
			{
				this._ConvienceProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warrenty_EnergyProduct", Storage="_EnergyProducts", ThisKey="ID", OtherKey="Warrenty_ID")]
		public EntitySet<EnergyProduct> EnergyProducts
		{
			get
			{
				return this._EnergyProducts;
			}
			set
			{
				this._EnergyProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SafetyProducts(SafetyProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = this;
		}
		
		private void detach_SafetyProducts(SafetyProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = null;
		}
		
		private void attach_ConvienceProducts(ConvienceProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = this;
		}
		
		private void detach_ConvienceProducts(ConvienceProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = null;
		}
		
		private void attach_EnergyProducts(EnergyProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = this;
		}
		
		private void detach_EnergyProducts(EnergyProduct entity)
		{
			this.SendPropertyChanging();
			entity.Warrenty = null;
		}
	}
}
#pragma warning restore 1591
